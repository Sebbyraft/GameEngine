package engineTester;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import models.RawModel;
import models.TexturedModel;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;

import renderEngine.DisplayManager;
import renderEngine.Loader;
import renderEngine.MasterRenderer;
import renderEngine.OBJLoader;
import terrains.Terrain;
import textures.ModelTexture;
import textures.TerrainTexture;
import textures.TerrainTexturePack;
import entities.Camera;
import entities.Entity;
import entities.Light;
import entities.Player;
import guis.GuiRenderer;
import guis.GuiTexture;

public class MainGameLoop {

	public static void main(String[] args) {

		DisplayManager.createDisplay();
		Loader loader = new Loader();
		
		//*************************** TERRAIN TEXTURE PACK ******************************
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadTexture("grassy"));
		TerrainTexture rTexture = new TerrainTexture(loader.loadTexture("dirt"));
		TerrainTexture gTexture = new TerrainTexture(loader.loadTexture("pinkFlowers"));
		TerrainTexture bTexture = new TerrainTexture(loader.loadTexture("path"));
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture, rTexture, gTexture, bTexture);
		TerrainTexture blendMap = new TerrainTexture(loader.loadTexture("blendMap"));
		//********************************************************************************
		Terrain terrain = new Terrain(0, -1, loader, texturePack, blendMap, "heightmap");
		//Terrain terrain2 = new Terrain(-1, -1, loader, texturePack, blendMap, "heightmap");
		//********************************************************************************
		
		//*************************** ENTITY STUFF ***************************************
		ModelTexture fernTextureAtlas = new ModelTexture(loader.loadTexture("fern"));
		RawModel fernRawModel = OBJLoader.loadObjModel("fern", loader);
		fernTextureAtlas.setNumberOfRows(2);
		
		RawModel treeModel = OBJLoader.loadObjModel("lowPolyTree", loader);
		RawModel boxModel = OBJLoader.loadObjModel("box", loader);
		RawModel pineModel = OBJLoader.loadObjModel("pine", loader);
		
		ModelTexture grassTextureAtlas = new ModelTexture(loader.loadTexture("diffuse"));
		RawModel grassModel = OBJLoader.loadObjModel("grass", loader);
		grassTextureAtlas.setNumberOfRows(2);
		
		TexturedModel fern = new TexturedModel(fernRawModel,fernTextureAtlas);
		fern.getTexture().setHasTransparency(true);
		fern.getTexture().setUseFakeLighting(true);
		TexturedModel grass = new TexturedModel(grassModel, grassTextureAtlas);
		grass.getTexture().setHasTransparency(true);
		grass.getTexture().setUseFakeLighting(true);
		
		TexturedModel tree = new TexturedModel(treeModel,new ModelTexture(loader.loadTexture("lowPolyTree")));
		TexturedModel box = new TexturedModel(boxModel, new ModelTexture(loader.loadTexture("box")));
		TexturedModel pine = new TexturedModel(pineModel, new ModelTexture(loader.loadTexture("pine")));
		
		List<Entity> entities = new ArrayList<Entity>();
		Random random = new Random();
		for(int i=0;i<600;i++){
			if(i % 2 == 0) {
				float x = random.nextFloat()*800; 
				float z = random.nextFloat()*-800; 
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(fern, random.nextInt(4),new Vector3f(x,y,z),0,random.nextFloat()*360,0,1.3f));
			}
			
			if(i % 5 == 0) {
				float x = random.nextFloat()*800;
				float z = random.nextFloat() * -800;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(tree, new Vector3f(x,y,z),0,0,0,1.7f));
			}
			
			if(i % 20 == 0) {
				float x = random.nextFloat()*800;
				float z = random.nextFloat() * -800;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(box, new Vector3f(x,y,z),0,0,0,4f));
			}
			
			if(i % 10 == 0) {
				float x = random.nextFloat()*800;
				float z = random.nextFloat() * -800;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(pine, new Vector3f(x,y,z),0,0,0,4f));
			}
			
			if(i % 3 == 0) {
				float x = random.nextFloat()*800;
				float z = random.nextFloat() * -800;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(grass, new Vector3f(x,y,z),0,0,0,4f));
			}
			
		}
		//********************************************************************************
		
		//**************************** LIGHT STUFF ***************************************
		List<Light> lights = new ArrayList<Light>();
		lights.add(new Light(new Vector3f(0000,10000,-10000),new Vector3f(1.5f,1.5f,1.5f)));
		lights.add(new Light(new Vector3f(-200,10,-200),new Vector3f(0,0,0)));
		lights.add(new Light(new Vector3f(200,10,200),new Vector3f(0,0,0)));
		//********************************************************************************
		
		//*************************** PLAYER STUFF ***************************************
		RawModel bunnyModel = OBJLoader.loadObjModel("person", loader);
		TexturedModel stanfordBunny = new TexturedModel(bunnyModel, new ModelTexture(loader.loadTexture("playerTexture")));
		Player player = new Player(stanfordBunny, new Vector3f(50,0,-100),0, 180, 0, 1);
		//********************************************************************************
		
		
		//*************************** CAMERA STUFF ***************************************
		Camera camera = new Camera(player);	
		//********************************************************************************
		
		
		//****************************** GUI STUFF ***************************************
		List<GuiTexture> guis = new ArrayList<GuiTexture>();
		guis.add(new GuiTexture(loader.loadTexture("health"), new Vector2f(-0.8f, 0.9f),new Vector2f(0.2f, 0.3f)));
		//********************************************************************************
		
		//****************************** RENDERERS ***************************************
		MasterRenderer renderer = new MasterRenderer();
		GuiRenderer guiRenderer = new GuiRenderer(loader);
		
		while(!Display.isCloseRequested()){
			camera.move();
			player.move(terrain);
			
			renderer.processEntity(player);
			renderer.processTerrain(terrain);
			//renderer.processTerrain(terrain2);
			for(Entity entity:entities){
				renderer.processEntity(entity);
			}
			renderer.render(lights, camera);
			guiRenderer.render(guis);
			DisplayManager.updateDisplay();
		}

		guiRenderer.cleanUp();
		renderer.cleanUp();
		loader.cleanUp();
		DisplayManager.closeDisplay();

	}

}
